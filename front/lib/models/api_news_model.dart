class ApiNewsModel {
  final String id;
  final String title;
  final String description;
  final String keyword;
  final String originallink;
  final String link;
  final String pubDate;
  final String? imageUrl;          // ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ URL
  final String? cloudfrontImageUrl; // CloudFront URL
  final String collectedAt;
  final String contentType;
  final String source;

  ApiNewsModel({
    required this.id,
    required this.title,
    required this.description,
    required this.keyword,
    required this.originallink,
    required this.link,
    required this.pubDate,
    this.imageUrl,
    this.cloudfrontImageUrl,
    required this.collectedAt,
    required this.contentType,
    required this.source,
  });

  factory ApiNewsModel.fromJson(Map<String, dynamic> json) {
    return ApiNewsModel(
      id: json['id'] ?? '',
      title: json['title'] ?? '',
      description: json['description'] ?? '',
      keyword: json['keyword'] ?? '',
      originallink: json['originallink'] ?? '',
      link: json['link'] ?? '',
      pubDate: json['pubDate'] ?? '',
      imageUrl: json['image_url'],           // ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ URL
      cloudfrontImageUrl: json['cloudfront_image_url'],  // CloudFront URL
      collectedAt: json['collected_at'] ?? '',
      contentType: json['content_type'] ?? '',
      source: json['source'] ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'keyword': keyword,
      'originallink': originallink,
      'link': link,
      'pubDate': pubDate,
      'image_url': imageUrl,              // ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ URL
      'cloudfront_image_url': cloudfrontImageUrl,  // CloudFront URL
      'collected_at': collectedAt,
      'content_type': contentType,
      'source': source,
    };
  }

  // Î∞úÌñâÏùºÏùÑ DateTimeÏúºÎ°ú Î≥ÄÌôò
  DateTime? get publishedDateTime {
    try {
      // RFC 822 ÌòïÏãù: "Thu, 07 Aug 2025 05:40:00 +0900"
      if (pubDate.isEmpty) return null;
      
      // RFC 822 ÌòïÏãùÏùÑ ISO 8601 ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      String cleanDate = pubDate.trim();
      
      // ÏöîÏùºÍ≥º ÏΩ§Îßà Ï†úÍ±∞: "Thu, " -> ""
      cleanDate = cleanDate.replaceFirst(RegExp(r'^[A-Za-z]{3},\s*'), '');
      
      // Ïõî Ïù¥Î¶ÑÏùÑ Ïà´ÏûêÎ°ú Î≥ÄÌôò
      final months = {
        'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
        'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',
        'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'
      };
      
      // "07 Aug 2025 05:40:00 +0900" ÌòïÏãù ÌååÏã±
      final parts = cleanDate.split(' ');
      print('üîç ÏõêÎ≥∏: $pubDate');
      print('üîç Ï†ïÎ¶¨Îêú: $cleanDate');
      print('üîç ÌååÏã±Îêú Î∂ÄÎ∂ÑÎì§: $parts');
      
      if (parts.length >= 5) {
        final day = parts[0].padLeft(2, '0');
        final month = months[parts[1]] ?? '01';
        final year = parts[2];
        final time = parts[3];
        final timezone = parts[4];
        
        // ÌÉÄÏûÑÏ°¥ ÌòïÏãù ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
        String formattedTimezone = timezone;
        if (timezone.length == 5 && (timezone.startsWith('+') || timezone.startsWith('-'))) {
          // +0900 -> +09:00
          formattedTimezone = '${timezone.substring(0, 3)}:${timezone.substring(3)}';
        }
        
        // ISO 8601 ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò: "2025-08-07T05:40:00+09:00"
        final isoDate = '$year-$month-${day}T$time$formattedTimezone';
        print('üîç ISO Î≥ÄÌôò: $isoDate');
        
        final parsedDate = DateTime.parse(isoDate);
        print('‚úÖ ÌååÏã± ÏÑ±Í≥µ: $parsedDate');
        return parsedDate;
      }
      
      // ÌååÏã± Ïã§Ìå® Ïãú ÌòÑÏû¨ ÏãúÍ∞Ñ Î∞òÌôò
      return DateTime.now();
    } catch (e) {

      print('ÎÇ†Ïßú ÌååÏã± Ïò§Î•ò: $pubDate -> $e');
      return DateTime.now(); // ÌååÏã± Ïã§Ìå® Ïãú ÌòÑÏû¨ ÏãúÍ∞ÑÏúºÎ°ú ÎåÄÏ≤¥
    }
  }

  // ÏÉÅÎåÄ ÏãúÍ∞Ñ ÌëúÏãú (Î™á ÏãúÍ∞Ñ Ï†Ñ, Î©∞Ïπ† Ï†Ñ)
  String get timeAgo {
    final publishedTime = publishedDateTime;
    if (publishedTime == null) return 'ÏãúÍ∞Ñ Ï†ïÎ≥¥ ÏóÜÏùå';

    final now = DateTime.now();
    final difference = now.difference(publishedTime);

    if (difference.inDays > 30) {
      return '${(difference.inDays / 30).floor()}Í∞úÏõî Ï†Ñ';
    } else if (difference.inDays > 0) {
      return '${difference.inDays}Ïùº Ï†Ñ';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}ÏãúÍ∞Ñ Ï†Ñ';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}Î∂Ñ Ï†Ñ';
    } else if (difference.inSeconds > 0) {
      return '${difference.inSeconds}Ï¥à Ï†Ñ';
    } else {
      return 'Î∞©Í∏à Ï†Ñ';
    }
  }

  // Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
  bool get hasImage => imageUrl != null && imageUrl!.isNotEmpty;
}